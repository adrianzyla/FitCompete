@page "/achievements/edit/{AchievementId:int}"
@inject IChallengeHttpService AppService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Edytuj Osiągnięcie</PageTitle>

@if (_model == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudText Typo="Typo.h4" GutterBottom="true">Edytuj Osiągnięcie</MudText>
    <EditForm Model="@_model" OnValidSubmit="HandleUpdateAchievement">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6"><MudTextField @bind-Value="_model.Name" For="@(() => _model.Name)" Label="Nazwa Osiągnięcia" Required="true" /></MudItem>
                    <MudItem xs="12" sm="6"><MudTextField @bind-Value="_model.BadgeImageUrl" For="@(() => _model.BadgeImageUrl)" Label="URL obrazka odznaki" Required="true" /></MudItem>
                    <MudItem xs="12"><MudTextField @bind-Value="_model.Description" For="@(() => _model.Description)" Label="Opis" Lines="3" Required="true" /></MudItem>
                    <MudItem xs="12" sm="6">
                        @* Teraz, gdy enum jest w _Imports.razor, to zadziała *@
                        <MudSelect T="AchievementCondition" @bind-Value="_model.Condition" For="@(() => _model.Condition)" Label="Warunek" Required="true">
                            <MudSelectItem Value="AchievementCondition.LessThan">Mniej niż</MudSelectItem>
                            <MudSelectItem Value="AchievementCondition.GreaterThan">Więcej niż</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6"><MudNumericField @bind-Value="_model.ThresholdValue" For="@(() => _model.ThresholdValue)" Label="Wartość progowa" Required="true" /></MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Zapisz Zmiany</MudButton>
                <MudButton OnClick="@(() => NavigationManager.NavigateTo("/achievements-admin"))" Variant="Variant.Text">Anuluj</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {
    [Parameter] public int AchievementId { get; set; }

    private AchievementUpdateDto? _model;

    protected override async Task OnInitializedAsync()
    {
        var achievement = await AppService.GetAchievementByIdAsync(AchievementId);
        if (achievement != null)
        {
            _model = new AchievementUpdateDto
                {
                    Name = achievement.Name,
                    Description = achievement.Description,
                    BadgeImageUrl = achievement.BadgeImageUrl,
                    Condition = achievement.Condition,
                    ThresholdValue = achievement.ThresholdValue
                };
        }
    }

    private async Task HandleUpdateAchievement()
    {
        if (_model == null) return;
        await AppService.UpdateAchievementAsync(AchievementId, _model);
        Snackbar.Add("Osiągnięcie zaktualizowane!", Severity.Success);
        NavigationManager.NavigateTo("/achievements-admin");
    }
}