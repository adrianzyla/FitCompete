@page "/achievements-admin"
@inject IChallengeHttpService AppService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Zarządzaj Osiągnięciami</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Panel Zarządzania Osiągnięciami</MudText>

<MudPaper Class="pa-4 mb-4" Elevation="3">
    <EditForm Model="@_newAchievement" OnValidSubmit="HandleCreateAchievement">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="6"><MudTextField @bind-Value="_newAchievement.Name" For="@(() => _newAchievement.Name)" Label="Nazwa Osiągnięcia" Required="true" /></MudItem>
            <MudItem xs="12" sm="6"><MudTextField @bind-Value="_newAchievement.BadgeImageUrl" For="@(() => _newAchievement.BadgeImageUrl)" Label="URL obrazka odznaki" Required="true" /></MudItem>
            <MudItem xs="12"><MudTextField @bind-Value="_newAchievement.Description" For="@(() => _newAchievement.Description)" Label="Opis" Lines="3" Required="true" /></MudItem>
            <MudItem xs="12" sm="4">
                <MudSelect T="int" @bind-Value="_newAchievement.ChallengeId" For="@(() => _newAchievement.ChallengeId)" Label="Powiązane wyzwanie" Required="true">
                    @if (_challenges != null)
                    {
                        @foreach (var challenge in _challenges)
                        {
                            <MudSelectItem Value="challenge.ChallengeId">@challenge.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudSelect T="AchievementCondition" @bind-Value="_newAchievement.Condition" For="@(() => _newAchievement.Condition)" Label="Warunek" Required="true">
                    <MudSelectItem T="AchievementCondition" Value="AchievementCondition.LessThan">Mniej niż</MudSelectItem>
                    <MudSelectItem T="AchievementCondition" Value="AchievementCondition.GreaterThan">Więcej niż</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="4"><MudNumericField @bind-Value="_newAchievement.ThresholdValue" For="@(() => _newAchievement.ThresholdValue)" Label="Wartość progowa" Required="true" /></MudItem>
        </MudGrid>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Dodaj Osiągnięcie</MudButton>
    </EditForm>
</MudPaper>

<MudTable Items="@_achievements" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh>Nazwa</MudTh>
        <MudTh>Wyzwanie</MudTh>
        <MudTh>Warunek</MudTh>
        <MudTh>Akcje</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nazwa">@context.Name</MudTd>
        <MudTd DataLabel="Wyzwanie">@(_challenges?.FirstOrDefault(c => c.ChallengeId == context.ChallengeId)?.Name ?? "Brak")</MudTd>
        <MudTd DataLabel="Warunek">@context.Condition @context.ThresholdValue</MudTd>
        <MudTd DataLabel="Akcje">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/achievements/edit/{context.AchievementId}"))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(async () => await DeleteAchievement(context.AchievementId))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<AchievementDto>? _achievements;
    private IEnumerable<ChallengeDto>? _challenges;
    private AchievementCreateDto _newAchievement = new();

    protected override async Task OnInitializedAsync() => await LoadData();

    private async Task LoadData()
    {
        _achievements = await AppService.GetAllAchievementsAsync();
        _challenges = await AppService.GetAllChallengesAsync();
        StateHasChanged();
    }

    private async Task HandleCreateAchievement()
    {
        var result = await AppService.CreateAchievementAsync(_newAchievement);
        if (result != null)
        {
            Snackbar.Add("Dodano osiągnięcie!", Severity.Success);
            _newAchievement = new();
            await LoadData();
        }
        else
        {
            Snackbar.Add("Błąd podczas dodawania.", Severity.Error);
        }
    }

    private async Task DeleteAchievement(int id)
    {
        await AppService.DeleteAchievementAsync(id);
        Snackbar.Add("Usunięto osiągnięcie.", Severity.Info);
        await LoadData();
    }
}