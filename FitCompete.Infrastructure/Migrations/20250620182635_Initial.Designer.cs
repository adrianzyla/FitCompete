// <auto-generated />
using System;
using FitCompete.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitCompete.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620182635_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("FitCompete.Domain.Entities.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BadgeImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ThresholdValue")
                        .HasColumnType("TEXT");

                    b.HasKey("AchievementId");

                    b.HasIndex("ChallengeId")
                        .IsUnique();

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            AchievementId = 1,
                            BadgeImageUrl = "/images/badges/pushup-master.png",
                            ChallengeId = 1,
                            Condition = 0,
                            Description = "Ukończ wyzwanie 100 pompek w mniej niż 180 sekund (3 minuty).",
                            Name = "Pompkowy Sprinter",
                            ThresholdValue = 180m
                        },
                        new
                        {
                            AchievementId = 2,
                            BadgeImageUrl = "/images/badges/runner.png",
                            ChallengeId = 2,
                            Condition = 0,
                            Description = "Ukończ bieg na 5km w czasie poniżej 1500 sekund (25 minut).",
                            Name = "Maratończyk",
                            ThresholdValue = 1500m
                        },
                        new
                        {
                            AchievementId = 3,
                            BadgeImageUrl = "/images/badges/plank-iron.png",
                            ChallengeId = 3,
                            Condition = 1,
                            Description = "Utrzymaj pozycję deski przez ponad 120 sekund (2 minuty).",
                            Name = "Żelazny Rdzeń",
                            ThresholdValue = 120m
                        });
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("ChallengeId");

                    b.HasIndex("ChallengeCategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            ChallengeId = 1,
                            ChallengeCategoryId = 1,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2024, 5, 21, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Zrób 100 klasycznych pompek w jak najkrótszym czasie. Liczy się czas w sekundach.",
                            Name = "100 Pompek na czas",
                            UnitOfMeasure = "sekundy"
                        },
                        new
                        {
                            ChallengeId = 2,
                            ChallengeCategoryId = 2,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2024, 5, 21, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Przebiegnij 5 kilometrów w jak najkrótszym czasie. Wynik podaj w sekundach.",
                            Name = "Bieg na 5km",
                            UnitOfMeasure = "sekundy"
                        },
                        new
                        {
                            ChallengeId = 3,
                            ChallengeCategoryId = 1,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2024, 5, 21, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Utrzymaj pozycję deski jak najdłużej. Wynik to czas w sekundach.",
                            Name = "Plank (deska)",
                            UnitOfMeasure = "sekundy"
                        },
                        new
                        {
                            ChallengeId = 4,
                            ChallengeCategoryId = 1,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2024, 5, 21, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Wykonaj jak najwięcej podciągnięć nachwytem w jednej serii.",
                            Name = "Max podciągnięć",
                            UnitOfMeasure = "powtórzenia"
                        });
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.ChallengeAttempt", b =>
                {
                    b.Property<int>("ChallengeAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EvidenceUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ResultValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChallengeAttemptId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeAttempts");

                    b.HasData(
                        new
                        {
                            ChallengeAttemptId = 1,
                            AttemptDate = new DateTime(2024, 5, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            ChallengeId = 1,
                            ResultValue = 240m,
                            UserId = 2
                        },
                        new
                        {
                            ChallengeAttemptId = 2,
                            AttemptDate = new DateTime(2024, 5, 23, 12, 0, 0, 0, DateTimeKind.Utc),
                            ChallengeId = 1,
                            ResultValue = 175m,
                            UserId = 3
                        },
                        new
                        {
                            ChallengeAttemptId = 3,
                            AttemptDate = new DateTime(2024, 5, 24, 12, 0, 0, 0, DateTimeKind.Utc),
                            ChallengeId = 2,
                            ResultValue = 1600m,
                            UserId = 2
                        },
                        new
                        {
                            ChallengeAttemptId = 4,
                            AttemptDate = new DateTime(2024, 5, 25, 12, 0, 0, 0, DateTimeKind.Utc),
                            ChallengeId = 3,
                            ResultValue = 130m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.ChallengeCategory", b =>
                {
                    b.Property<int>("ChallengeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ChallengeCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ChallengeCategories");

                    b.HasData(
                        new
                        {
                            ChallengeCategoryId = 1,
                            Description = "Wyzwania oparte na sile mięśniowej.",
                            Name = "Siła"
                        },
                        new
                        {
                            ChallengeCategoryId = 2,
                            Description = "Wyzwania wytrzymałościowe.",
                            Name = "Cardio"
                        },
                        new
                        {
                            ChallengeCategoryId = 3,
                            Description = "Wyzwania związane z zakresem ruchu i kontrolą ciała.",
                            Name = "Gimnastyka/Gibkość"
                        });
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@fitcompete.com",
                            HashedPassword = "hashed_password_placeholder_admin",
                            IsAdmin = true,
                            RegistrationDate = new DateTime(2024, 5, 11, 12, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "rocky@stairway.com",
                            HashedPassword = "hashed_password_placeholder_1",
                            IsAdmin = false,
                            RegistrationDate = new DateTime(2024, 5, 16, 12, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "Rocky"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "kasia@power.com",
                            HashedPassword = "hashed_password_placeholder_2",
                            IsAdmin = false,
                            RegistrationDate = new DateTime(2024, 5, 19, 12, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "KasiaStrength"
                        });
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.UserAchievement", b =>
                {
                    b.Property<int>("UserAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AchievementId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateEarned")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserAchievementId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.Achievement", b =>
                {
                    b.HasOne("FitCompete.Domain.Entities.Challenge", "Challenge")
                        .WithOne("Achievement")
                        .HasForeignKey("FitCompete.Domain.Entities.Achievement", "ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.Challenge", b =>
                {
                    b.HasOne("FitCompete.Domain.Entities.ChallengeCategory", "ChallengeCategory")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitCompete.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedChallenges")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChallengeCategory");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.ChallengeAttempt", b =>
                {
                    b.HasOne("FitCompete.Domain.Entities.Challenge", "Challenge")
                        .WithMany("ChallengeAttempts")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitCompete.Domain.Entities.User", "User")
                        .WithMany("ChallengeAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.UserAchievement", b =>
                {
                    b.HasOne("FitCompete.Domain.Entities.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitCompete.Domain.Entities.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.Challenge", b =>
                {
                    b.Navigation("Achievement");

                    b.Navigation("ChallengeAttempts");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.ChallengeCategory", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("FitCompete.Domain.Entities.User", b =>
                {
                    b.Navigation("ChallengeAttempts");

                    b.Navigation("CreatedChallenges");

                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
